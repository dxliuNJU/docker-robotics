#!/bin/bash

set -e

SCRIPT_PATH=$(dirname $(readlink -f ${BASH_SOURCE[0]}))
source $SCRIPT_PATH/setup.bash

if [ -e /var/run/secrets/kubernetes.io/serviceaccount/token ]; then
	KUBERNETES="true"
	KUBERNETES_CACRT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
	KUBERNETES_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
	if [ -z "$KUBERNETES_NAMESPACE" ]; then
		>&2 echo KUBERNETES_NAMESPACE not set
		exit 31
	fi
		
fi

if [ -z "$TEAM_CYAN" ]; then
	>&2 echo Cyan team color not set, aborting
	exit 31
fi
if [ -z "$TEAM_MAGENTA" ]; then
	>&2 echo Magenta team color not set, aborting
	exit 31
fi
if [ -z "$JOB_NAME" ]; then
	>&2 echo Job name not set, aborting
	exit 31
fi
REFBOX_REMOTE="-r ${REFBOX_HOST:-refbox}:${REFBOX_PORT:-4444}"

for v in URI RS HOST PORT RS_SRV DATABASE COLLECTION QUERY MODIFICATION; do
	ev="REFBOX_MONGODB_$v"
	if [ -n "${!ev}" ]; then
		export INPUT_MONGODB_$v="${!ev}"
	fi
	ev="CLUSTER_MONGODB_$v"
	if [ -n "${!ev}" ]; then
		export OUTPUT_MONGODB_$v="${!ev}"
	fi
done

# Setup team names
echo "Setup team names (cyan: $TEAM_CYAN  magenta: $TEAM_MAGENTA)"
$LLSF_REFBOX_DIR/bin/rcll-refbox-instruct $REFBOX_REMOTE -w${REFBOX_SETUP_TIMEOUT:-120} -c $TEAM_CYAN -m $TEAM_MAGENTA || exit 32

if [ -n "$KUBERNETES" ]; then
	echo "Running in Kubernetes, waiting for robot pods (${ROBOTS[*]})"
	# Wait for the expected robot pods
	if [ -n "$ROBOTS" ]; then
		CLAUSE=${ROBOTS// /%2C}
		TRIES=0
		N=0
		declare -a ROBOTS=($ROBOTS)
		URL="https://kubernetes.default/api/v1/namespaces/$KUBERNETES_NAMESPACE/pods?labelSelector=app%3dfawkes,robot+in+%28${CLAUSE}%29"
		echo "URL: $URL"
		while (( $N != ${#ROBOTS[@]} )); do
			# Debug to read in log
			RESULT=$(curl -s --cacert $KUBERNETES_CACRT --header "Authorization: Bearer $KUBERNETES_TOKEN" "$URL")
			N_PODS=$(jq -r '.items | length' <<< "$RESULT")
			if [ -z "$N_PODS" ]; then N_PODS=0; fi

			N=0
			for i in $(seq 0 $(($N_PODS - 1))); do
				PHASE=$(jq -r ".items[$i].status.phase" <<< "$RESULT")
				if [ "$PHASE" == "Running" ]; then
					N_CONTAINERS=$(jq -r ".items[$i].spec.containers | length" <<< "$RESULT")
					N_READY=$(jq -r ".items[$i].status.containerStatuses | map(select(.ready==true)) | length" <<< $RESULT)
					if (( "$N_CONTAINERS" == "$N_READY" )); then
						(( N=N+1 ))
					fi
				fi
			done

			(( TRIES=TRIES+1 ))

			echo "Robots found: $N/${#ROBOTS[@]} ($TRIES tries)"

			if (( $N != ${#ROBOTS[@]} )); then
				if (( $TRIES >= 60 )); then
					>&2 echo "Waited for $TRIES tries, aborting"
					exit 33
				fi
				sleep 5
			fi
		done
	fi
else
	>&2 echo "WARNING: Not running inside Kubernetes"
	>&2 echo "         Cannot determine robot pods, just waiting 30 sec"
	sleep 30
fi

# Ok, all good, run game
echo "Starting game"
$LLSF_REFBOX_DIR/bin/rcll-refbox-instruct $REFBOX_REMOTE -w${REFBOX_COMM_TIMEOUT:-30} -s RUNNING || exit 34

# Prematurely end SETUP phase and go straight to production (as per sim-comp rules)
sleep ${PREPARE_TIMEOUT:-92}
echo "Switching to production phase"
$LLSF_REFBOX_DIR/bin/rcll-refbox-instruct $REFBOX_REMOTE -w${REFBOX_COMM_TIMEOUT:-30} -p PRODUCTION || exit 35

# Wait production time, plus overtime, plus some
echo "Waiting for RCLL game to finish"
$LLSF_REFBOX_DIR/bin/rcll-refbox-instruct $REFBOX_REMOTE -w${REFBOX_COMM_TIMEOUT:-30} -W${PRODUCTION_TIMEOUT:-1230} -p POST_GAME

echo "Game Over"

echo "Transferring Game Report"
MONGODB_QUERY_DEFAULT='{"start-time": { "$exists": 1}, "end-time": { "$exists": 1}}'
export INPUT_MONGODB_QUERY=${REFBOX_GAMEREPORT_TRANSFER_MONGODB_QUERY:-$MONGODB_QUERY_DEFAULT}
MONGODB_TRANSFER_TRIES=0
MONGODB_TRANSFER_TRIES_MAX=${REFBOX_GAMEREPORT_TRANSFER_TRIES_MAX:-30}

while ! $SCRIPT_PATH/mongodb-transfer-document; do
	(( MONGODB_TRANSFER_TRIES=MONGODB_TRANSFER_TRIES+1))
	if (( $MONGODB_TRANSFER_TRIES == $MONGODB_TRANSFER_TRIES_MAX )); then
		>&2 echo "Failed to transfer game report document $MONGODB_TRANSFER_TRIES times, aborting"
		exit 36
	else
		echo "Game report MongoDB transfer failed in try $MONGODB_TRANSFER_TRIES/$MONGODB_TRANSFER_TRIES_MAX"
		sleep 1
	fi
done
unset INPUT_MONGODB_QUERY

if [ -z "$REFBOX_MONGODB_HOST" ] || [ -z "$REFBOX_MONGODB_PORT" ] || [ -z "$REFBOX_MONGODB_DATABASE" ]; then
	>&2 echo "WARNING: for database export refbox DB must be given as host/port/database, not URI, or RS SRV"
	echo "Simulation run completed (score not available without MongoDB)"
else
	if [ "${REFBOX_MONGODB_DO_EXPORT,,}" == "true" ]; then
		echo "Exporting Database"
		EXPORT_DIR=${JOB_NAME//:/_}
		time $SCRIPT_PATH/mongodb-export-db \
				 $REFBOX_MONGODB_HOST:$REFBOX_MONGODB_PORT $REFBOX_MONGODB_DATABASE /data/db-export/$EXPORT_DIR
	fi

	SCORE_DOC=$(mongo --host $REFBOX_MONGODB_HOST:$REFBOX_MONGODB_PORT $REFBOX_MONGODB_DATABASE \
										--quiet --eval "JSON.stringify(db.game_report.findOne({}, {'total-points': 1}))")
	SCORE_CYAN=$(jq -r '."total-points"[0].floatApprox' <<< "$SCORE_DOC")
	SCORE_MAGENTA=$(jq -r '."total-points"[1].floatApprox' <<< "$SCORE_DOC")

	echo "************************************************************************"
	echo
	echo "Simulation run completed"
	echo
	echo "Cyan:    $TEAM_CYAN"
	echo "Magenta: $TEAM_MAGENTA"
	echo "Score:   $SCORE_CYAN:$SCORE_MAGENTA"
	echo "Job:     $JOB_NAME"
	echo
	echo "************************************************************************"
fi

exit 0
